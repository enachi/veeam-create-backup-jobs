# VEEAM backup job generator
# Tomas Kreuzwieser, 2014
#############################################################################################

# source links:
# http://methodicallyaimless.wordpress.com/tag/veeam/
# http://www.vpowercli.co.uk/

# load snapins - veeam snapin
if ( (Get-PSSnapin -Name VeeamPSSnapIn -ErrorAction SilentlyContinue) -eq $null )
{
 Add-PsSnapin VeeamPSSnapIn
}
# load snapins - vmware snapin
if ( (Get-PSSnapin -Name VMware.VimAutomation.Core -ErrorAction SilentlyContinue) -eq $null )
{
 Add-PsSnapin VMware.VimAutomation.Core
}

# backup storage - local dedupe disk in our case
$RepoName = "LOCAL3"
# vcenters list (load VM and resource pools)
$vCenterServers = ("vc.ro.vutbr.cz")
# excluded resource pools
$pools_for_exclude = ("smetiste", "repliacas", "backup", "sandbox", "View-WIN7", "View-WIN8", "View-FBM", "VIEW")
# number of the job that are running in parallel
$parallel_num = 3
# first VM backup in each of the thread / stream
$StartTime = ('19:00:00')
# number of backups / restore points
$restore_points_num = 90
# load object repository by names
$Repo = Get-VBRBackupRepository -Name $RepoName 
# list of backup jobs (VMs) that this program will fill up and at the end of the script, then all of the jobs that are not in this list will be removed
$LeaveJobs = @{}
# temporary array will contain previous name of the backup job for each from parallel threads
$PrevJobInStream = @{}
# information
$prog_information = "generated by create veeam jobs script (version 9/2014)" 
# full backup transform period (create every n day)
$sfull_period = 2000; # docasne defakto vypnuto, full backup je vytvaren jednou za 2000 dnu
# types of backups
$job_types_do = ("Backup");
# VEEAM attribute in Vcenter
$vcenter_veemattr = "Backup/Veeam"

# include vcenter credentials ($vcenter_user and $vcenter_pass variable)
. c:\scripts\create_jobs.credentials.ps1

# create new objects for md5 and utf
$md5 = new-object -TypeName System.Security.Cryptography.MD5CryptoServiceProvider
$utf8 = new-object -TypeName System.Text.UTF8Encoding

foreach ($job_type in $job_types_do)
{
    # load all backup jobs of current type
    $BackupJobsInVeeam = Get-VBRJob | ? {$_.jobtype -eq $job_type}

    # foreach all vcenter servers
    foreach ($vCenterServer in ($vCenterServers))
    {
        # Connects to the vCenter server
        Connect-VIServer $vCenterServer  -Protocol https -User $vcenter_user -Password $vcenter_pass | Out-Null

        # search all VBR entities (VMs)
        $VBR_VMs = Find-VBRViEntity | ?{($_.Type -eq "VM")}
                
        $jobcounter = 0
        foreach ($vm in (Get-View -ViewType VirtualMachine -Filter @{'Config.Template'='False'} | Sort-Object Name))
        {
            # name of the VMs
            $vm_name = $vm.name 
            # name of the backup job
            $JobName = $vm.name
        
            write-host ""
            write-host "Processing VM $vm_name"
            write-host "=============================================================================="
        
            # default state is backup all VMs
            $do_backup = $true
                
            $process_excludes = $true
            if ($process_excludes)
            {
                # we will search custom attribute, which describes our own veeam backups (if exclude it or exclude part of it (in future))
                foreach ($CustomAttribute in $vm.AvailableField)
                { # list of custom VMs attributes
                    if ($CustomAttribute.Name -eq $vcenter_veemattr)
                    { # it exist custom attribute, which describes our own veeam backups  
                        $backup_par_val = ($vm.Summary.CustomValue | ? {$_.Key -eq $CustomAttribute.Key}).value
                        if ($backup_par_val)
                        { # parameter isn't empty
                            if ($backup_par_val.ToUpper().StartsWith("NO"))
                            { # parameter contain keyword NO, so i won't backup this VM
                                write-host "exclude VM $vm_name from backups (parameter $vcenter_veemattr contains keyword NO)"
                                $do_backup = $false    
                            }
                        } 
                    }
                }
        
                foreach ($rp in (Get-ResourcePool -vm $vm.name))
                {
                    foreach ($expool in $pools_for_exclude)
                    { # check if VM is in some excluded resource pool
                        if (($rp.name.ToUpper()) -eq ($expool.ToUpper()))
                        { # VM is in excluded resource pool, we omit this VM from backup
                            write-host "exclude VM $vm_name from backups (VM is in RP $rp)"
                            $do_backup = $false
                        }
                    }
                }
            }
        
            if ($do_backup)
            { # do backup - VM is not excluded
                # n par. threads
                $stream = $jobcounter % $parallel_num
        
                $Job = $null
                foreach ($JobLoop in $BackupJobsInVeeam)
                { # search existing job
                    if($JobLoop.name -eq $JobName)
                    { # job already exists
                        $Job = $JobLoop
                    }
                }
        
                write-host "+++ Setting backup job number $jobcounter (par #$stream) for VM $vm_name"
                write-host "=============================================================================="
        
                if (!$Job)
                { # create new backup job
                    write-host "Create new job backup for VM $vm_name" -foregroundcolor "green"
                    $ServerEntity = $VBR_VMs | ?{($_.Name -eq $vm_name)}
                    $Job = Add-VBRViBackupJob -Name $JobName -BackupRepository ($Repo) -Entity ($ServerEntity)
                }

                if ($Job)
                { # update objects (VMS) in the backup job, if necessary
                    # VMs in our virtualization system
                    $ServerEntity = $VBR_VMs | ?{($_.Name -eq $vm_name)}
                    # current VMs in the backup job
                    $ObjectsInJob = $Job.GetObjectsInJob()
                    # default state is do nothing
                    $regenerate_objects = $false

                    if ($ServerEntity.length -gt 0)
                    {
                        foreach ($obj in $ObjectsInJob)
                        {
                            $Items = $obj.GetObject().GetItem()

                            if (!(($ServerEntity[0].Id -eq $Items.Id) -and ($ServerEntity[0].Path -eq $Items.Path) -and ($ServerEntity[0].Name -eq $Items.Name) -and ($ServerEntity[0].Reference -eq $Items.Reference)))
                            {
                                $regenerate_objects = $true
                            }
                        }
                    }
                
                    if ($ObjectsInJob.length -ne $ServerEntity.length)
                    { # number of objects in backup job is different from number of VMs in virtualization system
                        $regenerate_objects = $true
                    }

                    if ($ObjectsInJob -eq 0)
                    { # error - job is empty
                        $regenerate_objects = $true
                        write-host "Detected empty backup job - something is wrong!" -foregroundcolor "red"
                    }

                    if ($regenerate_objects)
                    { # is necessary regenerate VM list in backup job (new path, new name or new VM with same name)
                        write-host "Regenerate VMs in the backup job" -foregroundcolor "yellow"
                        write-host "Changed name, location or the same name refers to the new VM" -foregroundcolor "yellow"
                        foreach ($obj in $ObjectsInJob)
                        { # delete all VMs from backup job
                            $obj.Delete() | Out-Null
                        }
                        # add new VM to the backup job
                        Add-VBRViJobObject -job $Job -Entities $ServerEntity
                    }
                }
        
                if ($Job)
                { # set the backup job options
                    write-host "It is necessary to edit the backup job for VM $vm_name" -foregroundcolor "green"
                    
                    $LeaveJobs.Add($JobName, "1")
        
                    $JobOptions = Get-VBRJobOptions $Job
                    $JobOptions.BackupStorageOptions.RetainCycles = $restore_points_num #This is the number of restore points kept
                    $JobOptions.JobOptions.SourceProxyAutoDetect = $true
                    $JobOptions.JobOptions.RunManually = $false
                    $JobOptions.BackupStorageOptions.RetainDays = 90 # This is how long a deleted VMs files are retained
                    $JobOptions.BackupStorageOptions.EnableDeduplication = $true
                    $JobOptions.BackupStorageOptions.CompressionLevel = 0
                    $JobOptions.BackupTargetOptions.Algorithm = "Increment"
                    
                    $hash = $md5.ComputeHash($utf8.GetBytes($JobName))
                    $curr_date = Get-Date
                    $full_in_days = (($curr_date.DayOfYear % $sfull_period) + (($hash[0]*256 + $hash[1]) % $sfull_period)) % $sfull_period
                     
                    $next_full = $curr_date.AddDays($full_in_days).ToShortDateString()
                    
                    if ($full_in_days -lt 7)
                    {
                        $DayOfWeek = $curr_date.AddDays($full_in_days).DayOfWeek
                        write-host "Transformation of the backup job to full backup will run for $full_in_days day(s) ($DayOfWeek $next_full)"
                        $JobOptions.BackupTargetOptions.TransformToSyntethicDays = $DayOfWeek
                    }
                    else
                    {
                        write-host "Transformation of the backup job to full backup will run for $full_in_days day(s) ($next_full)"
                        write-host "This is not less than 7 days. Setting past datetime (adddays(-1)."
                        $JobOptions.BackupTargetOptions.TransformToSyntethicDays = $curr_date.AddDays(-1).DayOfWeek
                    }

                    $JobOptions.BackupTargetOptions.TransformIncrementsToSyntethic = $true
                    $setJob = $Job | Set-VBRJobOptions -Options $JobOptions
        
                    if ($PrevJobInStream[$stream])
                    {
                        $prev_job = $PrevJobInStream[$stream]
                        $prev_job_name = $PrevJobInStream[$stream].name
                        write-host "Setting backup job $JobName as successor of the backup job $prev_job_name"
                        $prev_job.SetScheduleDependentJobs($Job)
                        $SetVBRJobSchedule = Set-VBRJobSchedule -Job $Job -AfterJob $prev_job
        
                        # set the job parameters
                        write-host "Setting the parameters for backup job $JobName"
                        $JobScheduleOptions = Get-VBRJobScheduleOptions $Job
                        $JobScheduleOptions.StartDateTime = "1. 1. 0001 0:00:00"
                        $JobScheduleOptions.EndDateTimeSpecified = $False
                        $JobScheduleOptions.RepeatSpecified = $False
                        $JobScheduleOptions.RepeatNumber = 1
                        $JobScheduleOptions.RepeatTimeUnitMs = 3600000
                        $JobScheduleOptions.RetryTimes = 3
                        $JobScheduleOptions.RetryTimeout = 10
                        $JobScheduleOptions.RetrySpecified = $True
                        $JobScheduleOptions.WaitForBackupCompletion = $True
                        $JobScheduleOptions.BackupCompetitionWaitingPeriodMin = 180
                        $JobScheduleOptions.OptionsDaily.Enabled = $False
                        $JobScheduleOptions.OptionsMonthly.Enabled = $False
                        $JobScheduleOptions.OptionsPeriodically.Enabled = $False
                        $JobScheduleOptions.OptionsContinuous.Enabled = $False
                        $JobScheduleOptions.NextRun = ""
                        $JobScheduleOptions.StartDateTime = 0
                        $SetVBRJobScheduleOptions = $Job | Set-VBRJobScheduleOptions -Options $JobScheduleOptions
                    }
                    else
                    {
                        # set the job parameters
                        write-host "Backup job $JobName is first in this stream, so it will be set time of start the job at $StartTime"
                        $ResetVBRJobScheduleOptions = Reset-VBRJobScheduleOptions -Job $Job
                        $JobScheduleOptions = Get-VBRJobScheduleOptions $Job
                        $JobScheduleOptions.OptionsDaily.Enabled = $true
                        $JobScheduleOptions.OptionsDaily.Kind = "Everyday"
                        $JobScheduleOptions.OptionsDaily.Time = $StartTime
                        $JobScheduleOptions.StartDateTime = $StartTime
                        $SetVBRJobSchedule = Set-VBRJobSchedule -Job $Job -Daily -At $StartTime -DailyKind Everyday
                        $SetVBRJobScheduleOptions = $Job | Set-VBRJobScheduleOptions -Options $JobScheduleOptions
                    }
                    # set the description
                    $description = 'vm: "{0}", modified: "{1}", thread: "{2}", nextsynfull: "{3}", info: "{4}"' -f $vm_name, (get-date).tostring('yyyy-MM-dd HH:mm:ss'), $stream, $next_full, $prog_information
                    $job.info.update($job.Name, $description) 
                    
                    # anyway, give permits for the job
                    $Job.EnableScheduler()
                }
                else
                {
                    write-host "Job problem for VM " + $vm_name -foregroundcolor "red"
                }
        
                $PrevJobInStream[$stream] = $Job
                $jobcounter++
            }
            else
            {
                $Job = Get-VBRJob | where {$_.name -eq $JobName}
                if ($Job)
                {
                    write-host "Existing backup job " + $Job.name + " will be beleted" -foregroundcolor "yellow"
                    Remove-VBRJob -Job $Job -Confirm:$false
                }
                else
                {
                    write-host "VM $vm_name is excluded from backups" -foregroundcolor "white"
                }
            }
        }
        
        # disconnects from VC - we don't need to be connected anymore 
        Disconnect-VIServer -confirm:$false
    }

    # final cleening    
    foreach ($Job in $BackupJobsInVeeam)
    { # search existing job
        if (!($LeaveJobs.ContainsKey($Job.name)))
        { # we don't need this backup job
            write-host "Deleting existing backup job " + $Job.name + "!" -foregroundcolor "red"  
            Remove-VBRJob -Job $Job -Confirm:$false
        }
    }
}
